import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
import os
from mutagen.mp3 import MP3
from mutagen.id3 import APIC, TIT2, TPE1
from PIL import Image
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = "–¢–í–û–ô-–¢–û–ö–ï–ù-–ë–û–¢–ê"
TEMP_DIR = "temp_files"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
os.makedirs(TEMP_DIR, exist_ok=True)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
class MusicStates(StatesGroup):
	waiting_for_photo = State()
	waiting_for_title = State()
	waiting_for_artist = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(level=logging.INFO)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}


@dp.message(Command("start"))
async def cmd_start(message: Message):
	await message.answer("–°–∫–∏–Ω—å MP3 —Ñ–∞–π–ª, —è –¥–æ–±–∞–≤–ª—é –∫ –Ω–µ–º—É –æ–±–ª–æ–∂–∫—É, –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!")


@dp.message(lambda message: message.audio or message.document)
async def handle_music(message: Message, state: FSMContext):
	# –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
	if message.audio:
		file = message.audio
		file_name = f"{file.file_id}.mp3"
	elif message.document and message.document.mime_type == "audio/mpeg":
		file = message.document
		file_name = message.document.file_name or f"{file.file_id}.mp3"
	else:
		await message.answer("–ü—Ä–∏—à–ª–∏ MP3 —Ñ–∞–π–ª")
		return

	# –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	file_path = os.path.join(TEMP_DIR, file_name)
	file_info = await bot.get_file(file.file_id)
	await bot.download_file(file_info.file_path, file_path)

	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
	user_data[message.from_user.id] = {
		'music_path': file_path,
		'original_name': file_name
	}

	await state.set_state(MusicStates.waiting_for_photo)
	await message.answer("–¢–µ–ø–µ—Ä—å —Å–∫–∏–Ω—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ–±–ª–æ–∂–∫–∏")


@dp.message(MusicStates.waiting_for_photo)
async def handle_photo(message: Message, state: FSMContext):
	if not message.photo:
		await message.answer("–°–∫–∏–Ω—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!")
		return

	user_id = message.from_user.id
	if user_id not in user_data:
		await message.answer("–°–Ω–∞—á–∞–ª–∞ —Å–∫–∏–Ω—å MP3 —Ñ–∞–π–ª")
		return

	# –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
	photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
	photo_path = os.path.join(TEMP_DIR, f"{photo.file_id}.jpg")
	file_info = await bot.get_file(photo.file_id)
	await bot.download_file(file_info.file_path, photo_path)

	# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Å–∂–∏–º–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
	with Image.open(photo_path) as img:
		# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
		if img.mode != 'RGB':
			img = img.convert('RGB')

		# –†–µ—Å–∞–π–∑–∏–º –¥–æ —Ä–∞–∑—É–º–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (500x500 max)
		img.thumbnail((500, 500), Image.Resampling.LANCZOS)

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–π—Ç—ã
		img_bytes = io.BytesIO()
		img.save(img_bytes, format='JPEG', quality=90)
		img_data = img_bytes.getvalue()

	# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
	user_data[user_id]['photo_data'] = img_data
	user_data[user_id]['photo_path'] = photo_path

	await state.set_state(MusicStates.waiting_for_title)
	await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞")


@dp.message(MusicStates.waiting_for_title)
async def handle_title(message: Message, state: FSMContext):
	if not message.text:
		await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞!")
		return

	user_id = message.from_user.id
	if user_id not in user_data:
		await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞")
		return

	title = message.text.strip()
	user_data[user_id]['title'] = title

	await state.set_state(MusicStates.waiting_for_artist)
	await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è")


@dp.message(MusicStates.waiting_for_artist)
async def handle_artist(message: Message, state: FSMContext):
	if not message.text:
		await message.answer("–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç–æ–º –∏–º—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è!")
		return

	user_id = message.from_user.id
	if user_id not in user_data:
		await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—á–Ω–∏ —Å–Ω–∞—á–∞–ª–∞")
		return

	artist = message.text.strip()
	title = user_data[user_id]['title']
	music_path = user_data[user_id]['music_path']
	img_data = user_data[user_id]['photo_data']
	new_path = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

	try:
		# –ó–∞–≥—Ä—É–∂–∞–µ–º MP3
		audiofile = MP3(music_path)

		# –î–æ–±–∞–≤–ª—è–µ–º ID3 —Ç–µ–≥–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
		if audiofile.tags is None:
			audiofile.add_tags()

		# –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞
		audiofile.tags.add(TIT2(encoding=3, text=title))

		# –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
		audiofile.tags.add(TPE1(encoding=3, text=artist))

		# –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É
		audiofile.tags.add(
			APIC(
				encoding=3,  # UTF-8
				mime='image/jpeg',
				type=3,  # Cover (front)
				desc='Cover',
				data=img_data
			)
		)

		# –°–æ—Ö—Ä–∞–Ω—è–µ–º
		audiofile.save()

		# –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å - –ù–∞–∑–≤–∞–Ω–∏–µ.mp3"
		safe_artist = "".join(c for c in artist if c.isalnum() or c in (' ', '-', '_')).rstrip()
		safe_title = "".join(c for c in title if c.isalnum() or c in (' ', '-', '_')).rstrip()

		if safe_artist and safe_title:
			new_filename = f"{safe_artist} - {safe_title}.mp3"
		elif safe_title:
			new_filename = f"{safe_title}.mp3"
		else:
			new_filename = user_data[user_id]['original_name']

		new_path = os.path.join(TEMP_DIR, new_filename)

		# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
		os.rename(music_path, new_path)

		# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ
		output_file = FSInputFile(new_path, filename=new_filename)
		await message.answer_audio(
			audio=output_file,
			caption=f"""–ì–æ—Ç–æ–≤–æ!
üéµ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {artist}
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {title}
üé® –û–±–ª–æ–∂–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞

üí° –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –æ–±–ª–æ–∂–∫—É:
- –°–∫–∞—á–∞–π —Ñ–∞–π–ª –∏ –æ—Ç–∫—Ä–æ–π –≤ –ø–ª–µ–µ—Ä–µ
- –ò–ª–∏ —Å–∫–∏–Ω—å —ç—Ç–æ—Ç —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º"""
		)

	except Exception as e:
		await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")

	finally:
		# –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
		try:
			if new_path and os.path.exists(new_path):
				os.remove(new_path)
			elif os.path.exists(music_path):
				os.remove(music_path)

			photo_path = user_data[user_id].get('photo_path')
			if photo_path and os.path.exists(photo_path):
				os.remove(photo_path)
		except:
			pass

		# –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if user_id in user_data:
			del user_data[user_id]

		await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
@dp.message(Command("cancel"))
async def cmd_cancel(message: Message, state: FSMContext):
	user_id = message.from_user.id

	# –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã
	if user_id in user_data:
		try:
			music_path = user_data[user_id].get('music_path')
			photo_path = user_data[user_id].get('photo_path')

			if music_path and os.path.exists(music_path):
				os.remove(music_path)
			if photo_path and os.path.exists(photo_path):
				os.remove(photo_path)
		except:
			pass

		del user_data[user_id]

	await state.clear()
	await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞ —Å –Ω–æ–≤–æ–≥–æ MP3 —Ñ–∞–π–ª–∞")


async def main():
	await dp.start_polling(bot)


if __name__ == '__main__':
	asyncio.run(main())